/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: IVI_Tbox_V2.0.proto */

#ifndef PROTOBUF_C_IVI_5fTbox_5fV2_2e0_2eproto__INCLUDED
#define PROTOBUF_C_IVI_5fTbox_5fV2_2e0_2eproto__INCLUDED

#include "protobuf.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Tbox__Net__CallAction Tbox__Net__CallAction;
typedef struct _Tbox__Net__CallActionResult Tbox__Net__CallActionResult;
typedef struct _Tbox__Net__CallStatus Tbox__Net__CallStatus;
typedef struct _Tbox__Net__TboxInfo Tbox__Net__TboxInfo;
typedef struct _Tbox__Net__TboxGPSCmd Tbox__Net__TboxGPSCmd;
typedef struct _Tbox__Net__TboxGPSInfo Tbox__Net__TboxGPSInfo;
typedef struct _Tbox__Net__TboxWifiClientInfo Tbox__Net__TboxWifiClientInfo;
typedef struct _Tbox__Net__WifiStatus Tbox__Net__WifiStatus;
typedef struct _Tbox__Net__WifiSetCmd Tbox__Net__WifiSetCmd;
typedef struct _Tbox__Net__WifiSetResult Tbox__Net__WifiSetResult;
typedef struct _Tbox__Net__ClientHello Tbox__Net__ClientHello;
typedef struct _Tbox__Net__ClientSendCertificate Tbox__Net__ClientSendCertificate;
typedef struct _Tbox__Net__ClientFinish Tbox__Net__ClientFinish;
typedef struct _Tbox__Net__CertificationStep Tbox__Net__CertificationStep;
typedef struct _Tbox__Net__CertificationCmd Tbox__Net__CertificationCmd;
typedef struct _Tbox__Net__ServerSendCertificate Tbox__Net__ServerSendCertificate;
typedef struct _Tbox__Net__ServerFinish Tbox__Net__ServerFinish;
typedef struct _Tbox__Net__CertificationStatus Tbox__Net__CertificationStatus;
typedef struct _Tbox__Net__CertificationResult Tbox__Net__CertificationResult;
typedef struct _Tbox__Net__MsgResult Tbox__Net__MsgResult;
typedef struct _Tbox__Net__TopMessage Tbox__Net__TopMessage;


/* --- enums --- */

typedef enum _Tbox__Net__Messagetype {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__MESSAGETYPE__REQUEST_RESPONSE_NONE = 0,
  /*
   *heartbeat signal
   */
  TBOX__NET__MESSAGETYPE__REQUEST_HEARTBEAT_SIGNAL = 1,
  /*
   *heartbeat call back
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_HEARTBEAT_RESULT = 2,
  /*
   *ivi request tbox network signal strength; no topmessage's field
   */
  TBOX__NET__MESSAGETYPE__REQUEST_NETWORK_SIGNAL_STRENGTH = 3,
  /*
   *tbox response network signal strength; topmessage's field: signal_type signal_power
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_NETWORK_SIGNAL_STRENGTH = 4,
  /*
   *ivi request tbox a call action; topmessage's field: call_action
   */
  TBOX__NET__MESSAGETYPE__REQUEST_CALL_ACTION = 5,
  /*
   *tbox response ivi a call action result; topmessage's field: call_result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_CALL_ACTION_RESULT = 6,
  /*
   *tbox report a call action status; topmessage's field: call_status
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_CALL_STATUS = 7,
  /*
   *ivi request tbox info; no topmessage's field
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOX_INFO = 8,
  /*
   *tbox response tbox info; topmessage's field: tbox_info
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_INFO = 9,
  /*
   *ivi request wifi status; no topmessage's field
   */
  TBOX__NET__MESSAGETYPE__REQUEST_WIFI_GET_STATUS = 10,
  /*
   *tbox response wifi status; topmessage's field: wifi_status
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_WIFI_STATUS = 11,
  /*
   *ivi request setup tbox wifi; topmessage's field: wifi_set_cmd
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SETUP_WIFI = 12,
  /*
   *tbox response wifi setup result; topmessage's field: wifi_set_result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_WIFI_SETUP_RESULT = 13,
  /*
   *ivi request get TBOX mac address
   */
  TBOX__NET__MESSAGETYPE__REQUEST_WIFI_MACADDRESS = 14,
  /*
   *tbox response mac address
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_WIFI_MACADDRESS_RESULT = 15,
  /*
   *ivi request get TBOX mac address
   */
  TBOX__NET__MESSAGETYPE__REQUEST_WIFI_CLIENT_LIST = 16,
  /*
   *tbox response mac address	
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_WIFI_CLIENT_LIST_RESULT = 17,
  /*
   *ivi request GPS set
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOX_GPS_SET = 18,
  /*
   *ivi response GPS set
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_GPS_SET_RESULT = 19,
  /*
   *tbox response gps nmea		
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_GPSINFO_RESULT = 20,
  /*
   *IVI certification
   */
  TBOX__NET__MESSAGETYPE__REQUEST_CERTIFICATION = 21,
  /*
   *tbox response certification
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_CERTIFICATION_RESULT = 22
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__MESSAGETYPE)
} Tbox__Net__Messagetype;
typedef enum _Tbox__Net__SignalType {
  /*
   * no signal
   */
  TBOX__NET__SIGNAL_TYPE__NONE_SIGNAL = 0,
  /*
   *2G
   */
  TBOX__NET__SIGNAL_TYPE__GSM = 1,
  /*
   *3G
   */
  TBOX__NET__SIGNAL_TYPE__UMTS = 2,
  /*
   *4G
   */
  TBOX__NET__SIGNAL_TYPE__LTE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__SIGNAL_TYPE)
} Tbox__Net__SignalType;
typedef enum _Tbox__Net__CallType {
  TBOX__NET__CALL_TYPE__ECALL = 0,
  TBOX__NET__CALL_TYPE__BCALL = 1,
  TBOX__NET__CALL_TYPE__ICALL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CALL_TYPE)
} Tbox__Net__CallType;
typedef enum _Tbox__Net__CallActionEnum {
  /*
   * start a CALL
   */
  TBOX__NET__CALL_ACTION_ENUM__START_CALL = 0,
  /*
   * end current CALL
   */
  TBOX__NET__CALL_ACTION_ENUM__END_CALL = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CALL_ACTION_ENUM)
} Tbox__Net__CallActionEnum;
typedef enum _Tbox__Net__CallActionResultEnum {
  /*
   *request action success
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__CALL_ACTION_SUCCESS = 0,
  /*
   *nonsupport the call
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__CALL_ACTION_NONSUPPORT = 1,
  /*
   *start call failed because now a call is processing
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__START_FAILED_CALL_PROCESSING = 2,
  /*
   *start call failed because other reasons
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__START_FAILED_OTHER_ERROR = 3,
  /*
   *end current call failed because now no call
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__END_FAILED_NO_CURRENT_CALL = 4,
  /*
   *end current call failed because other reasons
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__END_FAILED_OTHER_ERROR = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CALL_ACTION_RESULT_ENUM)
} Tbox__Net__CallActionResultEnum;
typedef enum _Tbox__Net__CallStatusEnum {
  /*
   *来电
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_IN = 0,
  /*
   *去电  
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_OUT = 1,
  /*
   *振铃
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_RING = 2,
  /*
   *接通
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_CONNECTED = 3,
  /*
   *挂断
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_DISCONNECTED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CALL_STATUS_ENUM)
} Tbox__Net__CallStatusEnum;
typedef enum _Tbox__Net__Hemisphere {
  TBOX__NET__HEMISPHERE__NORTH_LATI = 0,
  TBOX__NET__HEMISPHERE__SOUTH_LATI = 1,
  TBOX__NET__HEMISPHERE__EAST_LONGI = 2,
  TBOX__NET__HEMISPHERE__WEST_LONGI = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__HEMISPHERE)
} Tbox__Net__Hemisphere;
typedef enum _Tbox__Net__GPSSENDOnOff {
  /*
   *start GPS info send to IVI
   */
  TBOX__NET__GPS__SEND__ON_OFF__GPS_ON = 0,
  /*
   *stop
   */
  TBOX__NET__GPS__SEND__ON_OFF__GPS_OFF = 1,
  /*
   *Only send the GPS info for one time
   */
  TBOX__NET__GPS__SEND__ON_OFF__GPS_ONCE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__GPS__SEND__ON_OFF)
} Tbox__Net__GPSSENDOnOff;
typedef enum _Tbox__Net__WifiBandwidth {
  /*
   *2.4G
   */
  TBOX__NET__WIFI_BANDWIDTH__BANDWIDTH_2G = 0,
  /*
   *5G
   */
  TBOX__NET__WIFI_BANDWIDTH__BANDWIDTH_5G = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__WIFI_BANDWIDTH)
} Tbox__Net__WifiBandwidth;
typedef enum _Tbox__Net__WifiSetCmdEnum {
  TBOX__NET__WIFI_SET_CMD_ENUM__WIFI_ENABLE = 0,
  TBOX__NET__WIFI_SET_CMD_ENUM__WIFI_AP_SSID = 1,
  TBOX__NET__WIFI_SET_CMD_ENUM__WIFI_AP_PASSWORD = 2,
  TBOX__NET__WIFI_SET_CMD_ENUM__WIFI_AP_BANDWIDTH = 3,
  TBOX__NET__WIFI_SET_CMD_ENUM__WIFI_AP_MAXLINKS = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__WIFI_SET_CMD_ENUM)
} Tbox__Net__WifiSetCmdEnum;
typedef enum _Tbox__Net__CertificationCmdEum {
  TBOX__NET__CERTIFICATION_CMD_EUM__CLIENTHELLO = 0,
  TBOX__NET__CERTIFICATION_CMD_EUM__SERVICESENDCERTIFICATION = 1,
  TBOX__NET__CERTIFICATION_CMD_EUM__CLIENTSENDCERTIFICATION = 2,
  TBOX__NET__CERTIFICATION_CMD_EUM__SERVICEFINISHED = 3,
  TBOX__NET__CERTIFICATION_CMD_EUM__CLIENTFINISHED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CERTIFICATION_CMD_EUM)
} Tbox__Net__CertificationCmdEum;
typedef enum _Tbox__Net__SymEnc {
  TBOX__NET__SYM__ENC__SYM_ENC_NONE = 0,
  TBOX__NET__SYM__ENC__SYM_ENC_AES256_CBC = 1,
  TBOX__NET__SYM__ENC__SYM_ENC_3DES = 2,
  TBOX__NET__SYM__ENC__SYM_ENC_IDEA = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__SYM__ENC)
} Tbox__Net__SymEnc;

/* --- messages --- */

struct  _Tbox__Net__CallAction
{
  ProtobufCMessage base;
  Tbox__Net__CallType type;
  Tbox__Net__CallActionEnum action;
};
#define TBOX__NET__CALL_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__call_action__descriptor) \
    , TBOX__NET__CALL_TYPE__ECALL, TBOX__NET__CALL_ACTION_ENUM__START_CALL }


struct  _Tbox__Net__CallActionResult
{
  ProtobufCMessage base;
  Tbox__Net__CallType type;
  Tbox__Net__CallActionEnum action;
  Tbox__Net__CallActionResultEnum result;
};
#define TBOX__NET__CALL_ACTION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__call_action_result__descriptor) \
    , TBOX__NET__CALL_TYPE__ECALL, TBOX__NET__CALL_ACTION_ENUM__START_CALL, TBOX__NET__CALL_ACTION_RESULT_ENUM__CALL_ACTION_SUCCESS }


struct  _Tbox__Net__CallStatus
{
  ProtobufCMessage base;
  Tbox__Net__CallType type;
  Tbox__Net__CallStatusEnum call_status;
  ProtobufCBinaryData reserve;
};
#define TBOX__NET__CALL_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__call_status__descriptor) \
    , TBOX__NET__CALL_TYPE__ECALL, TBOX__NET__CALL_STATUS_ENUM__CALL_IN, {0,NULL} }


struct  _Tbox__Net__TboxInfo
{
  ProtobufCMessage base;
  char *software_version;
  char *hardware_version;
  char *iccid;
  char *pdid;
  char *imei;
  char *vin;
};
#define TBOX__NET__TBOX_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_info__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Tbox__Net__TboxGPSCmd
{
  ProtobufCMessage base;
  Tbox__Net__GPSSENDOnOff onoff;
  uint32_t time_cycle;
};
#define TBOX__NET__TBOX_GPSCMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_gpscmd__descriptor) \
    , TBOX__NET__GPS__SEND__ON_OFF__GPS_ON, 0 }


struct  _Tbox__Net__TboxGPSInfo
{
  ProtobufCMessage base;
  char *nmea;
};
#define TBOX__NET__TBOX_GPSINFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_gpsinfo__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Tbox__Net__TboxWifiClientInfo
{
  ProtobufCMessage base;
  ProtobufCBinaryData hostname;
  char *ip;
  char *mac;
};
#define TBOX__NET__TBOX_WIFI_CLIENT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_wifi_client_info__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Tbox__Net__WifiStatus
{
  ProtobufCMessage base;
  /*
   *true:wifi enable, flase: wifi disable
   */
  protobuf_c_boolean wifi_enabled;
  /*
   *wifi ssid
   */
  ProtobufCBinaryData wifi_ap_ssid;
  /*
   *wifi ap password, empty or "" means no password
   */
  char *wifi_ap_password;
  /*
   *wifi bandwidth
   */
  Tbox__Net__WifiBandwidth wifi_ap_bandwidth;
  /*
   *wifi max links
   */
  uint32_t wifi_ap_maxlinks;
  /*
   *wifi MAC address
   */
  char *wifi_app_macaddress;
  /*
   *wifi client list
   */
  size_t n_wifi_client_list;
  Tbox__Net__TboxWifiClientInfo **wifi_client_list;
};
#define TBOX__NET__WIFI_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__wifi_status__descriptor) \
    , 0, {0,NULL}, (char *)protobuf_c_empty_string, TBOX__NET__WIFI_BANDWIDTH__BANDWIDTH_2G, 0, (char *)protobuf_c_empty_string, 0,NULL }


struct  _Tbox__Net__WifiSetCmd
{
  ProtobufCMessage base;
  Tbox__Net__WifiSetCmdEnum cmd;
  Tbox__Net__WifiStatus *cmd_para_value;
};
#define TBOX__NET__WIFI_SET_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__wifi_set_cmd__descriptor) \
    , TBOX__NET__WIFI_SET_CMD_ENUM__WIFI_ENABLE, NULL }


struct  _Tbox__Net__WifiSetResult
{
  ProtobufCMessage base;
  Tbox__Net__WifiSetCmdEnum cmd;
  Tbox__Net__WifiStatus *stauts;
};
#define TBOX__NET__WIFI_SET_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__wifi_set_result__descriptor) \
    , TBOX__NET__WIFI_SET_CMD_ENUM__WIFI_ENABLE, NULL }


struct  _Tbox__Net__ClientHello
{
  ProtobufCMessage base;
  Tbox__Net__SymEnc mode;
  int32_t random;
};
#define TBOX__NET__CLIENT_HELLO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__client_hello__descriptor) \
    , TBOX__NET__SYM__ENC__SYM_ENC_NONE, 0 }


struct  _Tbox__Net__ClientSendCertificate
{
  ProtobufCMessage base;
  int32_t random;
  ProtobufCBinaryData sha256;
  ProtobufCBinaryData n512;
};
#define TBOX__NET__CLIENT_SEND_CERTIFICATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__client_send_certificate__descriptor) \
    , 0, {0,NULL}, {0,NULL} }


struct  _Tbox__Net__ClientFinish
{
  ProtobufCMessage base;
  ProtobufCBinaryData decoded;
};
#define TBOX__NET__CLIENT_FINISH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__client_finish__descriptor) \
    , {0,NULL} }


struct  _Tbox__Net__CertificationStep
{
  ProtobufCMessage base;
  Tbox__Net__ClientHello *start;
  Tbox__Net__ClientSendCertificate *sent;
  Tbox__Net__ClientFinish *finsh;
};
#define TBOX__NET__CERTIFICATION_STEP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__certification_step__descriptor) \
    , NULL, NULL, NULL }


struct  _Tbox__Net__CertificationCmd
{
  ProtobufCMessage base;
  Tbox__Net__CertificationCmdEum cmd;
  Tbox__Net__CertificationStep *cmd_para_value;
};
#define TBOX__NET__CERTIFICATION_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__certification_cmd__descriptor) \
    , TBOX__NET__CERTIFICATION_CMD_EUM__CLIENTHELLO, NULL }


struct  _Tbox__Net__ServerSendCertificate
{
  ProtobufCMessage base;
  int32_t random;
  ProtobufCBinaryData tbox_certificate;
};
#define TBOX__NET__SERVER_SEND_CERTIFICATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__server_send_certificate__descriptor) \
    , 0, {0,NULL} }


struct  _Tbox__Net__ServerFinish
{
  ProtobufCMessage base;
  ProtobufCBinaryData decoded;
};
#define TBOX__NET__SERVER_FINISH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__server_finish__descriptor) \
    , {0,NULL} }


struct  _Tbox__Net__CertificationStatus
{
  ProtobufCMessage base;
  Tbox__Net__ServerSendCertificate *send;
  Tbox__Net__ServerFinish *finish;
};
#define TBOX__NET__CERTIFICATION_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__certification_status__descriptor) \
    , NULL, NULL }


struct  _Tbox__Net__CertificationResult
{
  ProtobufCMessage base;
  Tbox__Net__CertificationCmdEum cmd;
  Tbox__Net__CertificationStatus *status;
};
#define TBOX__NET__CERTIFICATION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__certification_result__descriptor) \
    , TBOX__NET__CERTIFICATION_CMD_EUM__CLIENTHELLO, NULL }


struct  _Tbox__Net__MsgResult
{
  ProtobufCMessage base;
  /*
   *true:success    flase:failed
   */
  protobuf_c_boolean result;
  /*
   *none-error, dealing with failures and so on
   */
  ProtobufCBinaryData error_code;
};
#define TBOX__NET__MSG_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__msg_result__descriptor) \
    , 0, {0,NULL} }


struct  _Tbox__Net__TopMessage
{
  ProtobufCMessage base;
  /*
   *message type
   */
  Tbox__Net__Messagetype message_type;
  /*
   *current signal type
   */
  Tbox__Net__SignalType signal_type;
  /*
   *current signal strength, 0-5, 0 means no signal, 5 means strong strength
   */
  int32_t signal_power;
  Tbox__Net__CallAction *call_action;
  Tbox__Net__CallStatus *call_status;
  Tbox__Net__CallActionResult *call_result;
  Tbox__Net__TboxInfo *tbox_info;
  Tbox__Net__WifiSetCmd *wifi_set_cmd;
  Tbox__Net__WifiStatus *wifi_status;
  Tbox__Net__WifiSetResult *wifi_set_result;
  Tbox__Net__TboxGPSCmd *tbox_gps_ctrl;
  Tbox__Net__TboxGPSInfo *tbox_gpsinfo;
  Tbox__Net__CertificationCmd *certification_ctrl;
  Tbox__Net__CertificationResult *certification_result;
  Tbox__Net__MsgResult *msg_result;
};
#define TBOX__NET__TOP_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__top_message__descriptor) \
    , TBOX__NET__MESSAGETYPE__REQUEST_RESPONSE_NONE, TBOX__NET__SIGNAL_TYPE__NONE_SIGNAL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* Tbox__Net__CallAction methods */
void   tbox__net__call_action__init
                     (Tbox__Net__CallAction         *message);
size_t tbox__net__call_action__get_packed_size
                     (const Tbox__Net__CallAction   *message);
size_t tbox__net__call_action__pack
                     (const Tbox__Net__CallAction   *message,
                      uint8_t             *out);
size_t tbox__net__call_action__pack_to_buffer
                     (const Tbox__Net__CallAction   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CallAction *
       tbox__net__call_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__call_action__free_unpacked
                     (Tbox__Net__CallAction *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__CallActionResult methods */
void   tbox__net__call_action_result__init
                     (Tbox__Net__CallActionResult         *message);
size_t tbox__net__call_action_result__get_packed_size
                     (const Tbox__Net__CallActionResult   *message);
size_t tbox__net__call_action_result__pack
                     (const Tbox__Net__CallActionResult   *message,
                      uint8_t             *out);
size_t tbox__net__call_action_result__pack_to_buffer
                     (const Tbox__Net__CallActionResult   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CallActionResult *
       tbox__net__call_action_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__call_action_result__free_unpacked
                     (Tbox__Net__CallActionResult *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__CallStatus methods */
void   tbox__net__call_status__init
                     (Tbox__Net__CallStatus         *message);
size_t tbox__net__call_status__get_packed_size
                     (const Tbox__Net__CallStatus   *message);
size_t tbox__net__call_status__pack
                     (const Tbox__Net__CallStatus   *message,
                      uint8_t             *out);
size_t tbox__net__call_status__pack_to_buffer
                     (const Tbox__Net__CallStatus   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CallStatus *
       tbox__net__call_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__call_status__free_unpacked
                     (Tbox__Net__CallStatus *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxInfo methods */
void   tbox__net__tbox_info__init
                     (Tbox__Net__TboxInfo         *message);
size_t tbox__net__tbox_info__get_packed_size
                     (const Tbox__Net__TboxInfo   *message);
size_t tbox__net__tbox_info__pack
                     (const Tbox__Net__TboxInfo   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_info__pack_to_buffer
                     (const Tbox__Net__TboxInfo   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxInfo *
       tbox__net__tbox_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_info__free_unpacked
                     (Tbox__Net__TboxInfo *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxGPSCmd methods */
void   tbox__net__tbox_gpscmd__init
                     (Tbox__Net__TboxGPSCmd         *message);
size_t tbox__net__tbox_gpscmd__get_packed_size
                     (const Tbox__Net__TboxGPSCmd   *message);
size_t tbox__net__tbox_gpscmd__pack
                     (const Tbox__Net__TboxGPSCmd   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_gpscmd__pack_to_buffer
                     (const Tbox__Net__TboxGPSCmd   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxGPSCmd *
       tbox__net__tbox_gpscmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_gpscmd__free_unpacked
                     (Tbox__Net__TboxGPSCmd *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxGPSInfo methods */
void   tbox__net__tbox_gpsinfo__init
                     (Tbox__Net__TboxGPSInfo         *message);
size_t tbox__net__tbox_gpsinfo__get_packed_size
                     (const Tbox__Net__TboxGPSInfo   *message);
size_t tbox__net__tbox_gpsinfo__pack
                     (const Tbox__Net__TboxGPSInfo   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_gpsinfo__pack_to_buffer
                     (const Tbox__Net__TboxGPSInfo   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxGPSInfo *
       tbox__net__tbox_gpsinfo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_gpsinfo__free_unpacked
                     (Tbox__Net__TboxGPSInfo *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxWifiClientInfo methods */
void   tbox__net__tbox_wifi_client_info__init
                     (Tbox__Net__TboxWifiClientInfo         *message);
size_t tbox__net__tbox_wifi_client_info__get_packed_size
                     (const Tbox__Net__TboxWifiClientInfo   *message);
size_t tbox__net__tbox_wifi_client_info__pack
                     (const Tbox__Net__TboxWifiClientInfo   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_wifi_client_info__pack_to_buffer
                     (const Tbox__Net__TboxWifiClientInfo   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxWifiClientInfo *
       tbox__net__tbox_wifi_client_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_wifi_client_info__free_unpacked
                     (Tbox__Net__TboxWifiClientInfo *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__WifiStatus methods */
void   tbox__net__wifi_status__init
                     (Tbox__Net__WifiStatus         *message);
size_t tbox__net__wifi_status__get_packed_size
                     (const Tbox__Net__WifiStatus   *message);
size_t tbox__net__wifi_status__pack
                     (const Tbox__Net__WifiStatus   *message,
                      uint8_t             *out);
size_t tbox__net__wifi_status__pack_to_buffer
                     (const Tbox__Net__WifiStatus   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__WifiStatus *
       tbox__net__wifi_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__wifi_status__free_unpacked
                     (Tbox__Net__WifiStatus *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__WifiSetCmd methods */
void   tbox__net__wifi_set_cmd__init
                     (Tbox__Net__WifiSetCmd         *message);
size_t tbox__net__wifi_set_cmd__get_packed_size
                     (const Tbox__Net__WifiSetCmd   *message);
size_t tbox__net__wifi_set_cmd__pack
                     (const Tbox__Net__WifiSetCmd   *message,
                      uint8_t             *out);
size_t tbox__net__wifi_set_cmd__pack_to_buffer
                     (const Tbox__Net__WifiSetCmd   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__WifiSetCmd *
       tbox__net__wifi_set_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__wifi_set_cmd__free_unpacked
                     (Tbox__Net__WifiSetCmd *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__WifiSetResult methods */
void   tbox__net__wifi_set_result__init
                     (Tbox__Net__WifiSetResult         *message);
size_t tbox__net__wifi_set_result__get_packed_size
                     (const Tbox__Net__WifiSetResult   *message);
size_t tbox__net__wifi_set_result__pack
                     (const Tbox__Net__WifiSetResult   *message,
                      uint8_t             *out);
size_t tbox__net__wifi_set_result__pack_to_buffer
                     (const Tbox__Net__WifiSetResult   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__WifiSetResult *
       tbox__net__wifi_set_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__wifi_set_result__free_unpacked
                     (Tbox__Net__WifiSetResult *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__ClientHello methods */
void   tbox__net__client_hello__init
                     (Tbox__Net__ClientHello         *message);
size_t tbox__net__client_hello__get_packed_size
                     (const Tbox__Net__ClientHello   *message);
size_t tbox__net__client_hello__pack
                     (const Tbox__Net__ClientHello   *message,
                      uint8_t             *out);
size_t tbox__net__client_hello__pack_to_buffer
                     (const Tbox__Net__ClientHello   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__ClientHello *
       tbox__net__client_hello__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__client_hello__free_unpacked
                     (Tbox__Net__ClientHello *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__ClientSendCertificate methods */
void   tbox__net__client_send_certificate__init
                     (Tbox__Net__ClientSendCertificate         *message);
size_t tbox__net__client_send_certificate__get_packed_size
                     (const Tbox__Net__ClientSendCertificate   *message);
size_t tbox__net__client_send_certificate__pack
                     (const Tbox__Net__ClientSendCertificate   *message,
                      uint8_t             *out);
size_t tbox__net__client_send_certificate__pack_to_buffer
                     (const Tbox__Net__ClientSendCertificate   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__ClientSendCertificate *
       tbox__net__client_send_certificate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__client_send_certificate__free_unpacked
                     (Tbox__Net__ClientSendCertificate *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__ClientFinish methods */
void   tbox__net__client_finish__init
                     (Tbox__Net__ClientFinish         *message);
size_t tbox__net__client_finish__get_packed_size
                     (const Tbox__Net__ClientFinish   *message);
size_t tbox__net__client_finish__pack
                     (const Tbox__Net__ClientFinish   *message,
                      uint8_t             *out);
size_t tbox__net__client_finish__pack_to_buffer
                     (const Tbox__Net__ClientFinish   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__ClientFinish *
       tbox__net__client_finish__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__client_finish__free_unpacked
                     (Tbox__Net__ClientFinish *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__CertificationStep methods */
void   tbox__net__certification_step__init
                     (Tbox__Net__CertificationStep         *message);
size_t tbox__net__certification_step__get_packed_size
                     (const Tbox__Net__CertificationStep   *message);
size_t tbox__net__certification_step__pack
                     (const Tbox__Net__CertificationStep   *message,
                      uint8_t             *out);
size_t tbox__net__certification_step__pack_to_buffer
                     (const Tbox__Net__CertificationStep   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CertificationStep *
       tbox__net__certification_step__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__certification_step__free_unpacked
                     (Tbox__Net__CertificationStep *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__CertificationCmd methods */
void   tbox__net__certification_cmd__init
                     (Tbox__Net__CertificationCmd         *message);
size_t tbox__net__certification_cmd__get_packed_size
                     (const Tbox__Net__CertificationCmd   *message);
size_t tbox__net__certification_cmd__pack
                     (const Tbox__Net__CertificationCmd   *message,
                      uint8_t             *out);
size_t tbox__net__certification_cmd__pack_to_buffer
                     (const Tbox__Net__CertificationCmd   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CertificationCmd *
       tbox__net__certification_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__certification_cmd__free_unpacked
                     (Tbox__Net__CertificationCmd *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__ServerSendCertificate methods */
void   tbox__net__server_send_certificate__init
                     (Tbox__Net__ServerSendCertificate         *message);
size_t tbox__net__server_send_certificate__get_packed_size
                     (const Tbox__Net__ServerSendCertificate   *message);
size_t tbox__net__server_send_certificate__pack
                     (const Tbox__Net__ServerSendCertificate   *message,
                      uint8_t             *out);
size_t tbox__net__server_send_certificate__pack_to_buffer
                     (const Tbox__Net__ServerSendCertificate   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__ServerSendCertificate *
       tbox__net__server_send_certificate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__server_send_certificate__free_unpacked
                     (Tbox__Net__ServerSendCertificate *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__ServerFinish methods */
void   tbox__net__server_finish__init
                     (Tbox__Net__ServerFinish         *message);
size_t tbox__net__server_finish__get_packed_size
                     (const Tbox__Net__ServerFinish   *message);
size_t tbox__net__server_finish__pack
                     (const Tbox__Net__ServerFinish   *message,
                      uint8_t             *out);
size_t tbox__net__server_finish__pack_to_buffer
                     (const Tbox__Net__ServerFinish   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__ServerFinish *
       tbox__net__server_finish__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__server_finish__free_unpacked
                     (Tbox__Net__ServerFinish *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__CertificationStatus methods */
void   tbox__net__certification_status__init
                     (Tbox__Net__CertificationStatus         *message);
size_t tbox__net__certification_status__get_packed_size
                     (const Tbox__Net__CertificationStatus   *message);
size_t tbox__net__certification_status__pack
                     (const Tbox__Net__CertificationStatus   *message,
                      uint8_t             *out);
size_t tbox__net__certification_status__pack_to_buffer
                     (const Tbox__Net__CertificationStatus   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CertificationStatus *
       tbox__net__certification_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__certification_status__free_unpacked
                     (Tbox__Net__CertificationStatus *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__CertificationResult methods */
void   tbox__net__certification_result__init
                     (Tbox__Net__CertificationResult         *message);
size_t tbox__net__certification_result__get_packed_size
                     (const Tbox__Net__CertificationResult   *message);
size_t tbox__net__certification_result__pack
                     (const Tbox__Net__CertificationResult   *message,
                      uint8_t             *out);
size_t tbox__net__certification_result__pack_to_buffer
                     (const Tbox__Net__CertificationResult   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CertificationResult *
       tbox__net__certification_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__certification_result__free_unpacked
                     (Tbox__Net__CertificationResult *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__MsgResult methods */
void   tbox__net__msg_result__init
                     (Tbox__Net__MsgResult         *message);
size_t tbox__net__msg_result__get_packed_size
                     (const Tbox__Net__MsgResult   *message);
size_t tbox__net__msg_result__pack
                     (const Tbox__Net__MsgResult   *message,
                      uint8_t             *out);
size_t tbox__net__msg_result__pack_to_buffer
                     (const Tbox__Net__MsgResult   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__MsgResult *
       tbox__net__msg_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__msg_result__free_unpacked
                     (Tbox__Net__MsgResult *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TopMessage methods */
void   tbox__net__top_message__init
                     (Tbox__Net__TopMessage         *message);
size_t tbox__net__top_message__get_packed_size
                     (const Tbox__Net__TopMessage   *message);
size_t tbox__net__top_message__pack
                     (const Tbox__Net__TopMessage   *message,
                      uint8_t             *out);
size_t tbox__net__top_message__pack_to_buffer
                     (const Tbox__Net__TopMessage   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TopMessage *
       tbox__net__top_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__top_message__free_unpacked
                     (Tbox__Net__TopMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tbox__Net__CallAction_Closure)
                 (const Tbox__Net__CallAction *message,
                  void *closure_data);
typedef void (*Tbox__Net__CallActionResult_Closure)
                 (const Tbox__Net__CallActionResult *message,
                  void *closure_data);
typedef void (*Tbox__Net__CallStatus_Closure)
                 (const Tbox__Net__CallStatus *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxInfo_Closure)
                 (const Tbox__Net__TboxInfo *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxGPSCmd_Closure)
                 (const Tbox__Net__TboxGPSCmd *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxGPSInfo_Closure)
                 (const Tbox__Net__TboxGPSInfo *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxWifiClientInfo_Closure)
                 (const Tbox__Net__TboxWifiClientInfo *message,
                  void *closure_data);
typedef void (*Tbox__Net__WifiStatus_Closure)
                 (const Tbox__Net__WifiStatus *message,
                  void *closure_data);
typedef void (*Tbox__Net__WifiSetCmd_Closure)
                 (const Tbox__Net__WifiSetCmd *message,
                  void *closure_data);
typedef void (*Tbox__Net__WifiSetResult_Closure)
                 (const Tbox__Net__WifiSetResult *message,
                  void *closure_data);
typedef void (*Tbox__Net__ClientHello_Closure)
                 (const Tbox__Net__ClientHello *message,
                  void *closure_data);
typedef void (*Tbox__Net__ClientSendCertificate_Closure)
                 (const Tbox__Net__ClientSendCertificate *message,
                  void *closure_data);
typedef void (*Tbox__Net__ClientFinish_Closure)
                 (const Tbox__Net__ClientFinish *message,
                  void *closure_data);
typedef void (*Tbox__Net__CertificationStep_Closure)
                 (const Tbox__Net__CertificationStep *message,
                  void *closure_data);
typedef void (*Tbox__Net__CertificationCmd_Closure)
                 (const Tbox__Net__CertificationCmd *message,
                  void *closure_data);
typedef void (*Tbox__Net__ServerSendCertificate_Closure)
                 (const Tbox__Net__ServerSendCertificate *message,
                  void *closure_data);
typedef void (*Tbox__Net__ServerFinish_Closure)
                 (const Tbox__Net__ServerFinish *message,
                  void *closure_data);
typedef void (*Tbox__Net__CertificationStatus_Closure)
                 (const Tbox__Net__CertificationStatus *message,
                  void *closure_data);
typedef void (*Tbox__Net__CertificationResult_Closure)
                 (const Tbox__Net__CertificationResult *message,
                  void *closure_data);
typedef void (*Tbox__Net__MsgResult_Closure)
                 (const Tbox__Net__MsgResult *message,
                  void *closure_data);
typedef void (*Tbox__Net__TopMessage_Closure)
                 (const Tbox__Net__TopMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    tbox__net__messagetype__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__signal_type__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__call_type__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__call_action_enum__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__call_action_result_enum__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__call_status_enum__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__hemisphere__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__gps__send__on_off__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__wifi_bandwidth__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__wifi_set_cmd_enum__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__certification_cmd_eum__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__sym__enc__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__call_action__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__call_action_result__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__call_status__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_info__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_gpscmd__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_gpsinfo__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_wifi_client_info__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__wifi_status__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__wifi_set_cmd__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__wifi_set_result__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__client_hello__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__client_send_certificate__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__client_finish__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__certification_step__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__certification_cmd__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__server_send_certificate__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__server_finish__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__certification_status__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__certification_result__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__msg_result__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__top_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_IVI_5fTbox_5fV2_2e0_2eproto__INCLUDED */
